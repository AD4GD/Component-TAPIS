<!DOCTYPE html>
<html lang="en">
<head>

<title>Sensor Things API plus Explorer</title>
<script type="text/javascript" src="vis.min.js"></script>
<style type="text/css">
#mynetwork {
	width: 600px;
        height: 400px;
        border: 1px solid lightgray;
}

body {
	font-family: Arial
}

td {
	font-size: 0.5em
}

.center {
  margin: 0 auto;
  text-align: center;
}
</style>
<link rel="stylesheet" href="vis.min.css">


</head>
<body onLoad="StartSTAPage();">
	<h2>Sensor Things API plus Explorer</h2>
    
<button onclick='addCircularImage(null, null, "STAplus", "ogc.png");'><img src="ogc.png" height="20" valign="middle"> Add a STA service</button><br>
<span id="ButtonsSTAObjects"></span>
<button onclick='addCircularImage(null, null, "Table", "table.png");'><img src="table.png" height="20" valign="middle"> View Table</button><br>
<button onclick="addEdge();">Connect two nodes</button><br>

<div id="clarification"></div>

<div id="mynetwork"></div>

<dialog id="DialogSTAURL">
  <form>
    <p>
      <label>STA service URL:
        <input type="text" id="DialogSTAURLInput" size="100"></input>
      </label>
    </p>
    <div class="center">
      <button value="cancel" formmethod="dialog">Cancel</button>
      <button value="default" onClick="GetSTAURL(event)">OK</button>
    </div>
  </form>
</dialog>

<dialog id="DialogContext">
  <form>
    <p>
	<button onclick='addCircularImage(event, "DialogContext" "STAplus", "ogc.png");'><img src="ogc.png" height="20" valign="middle"> Add a STA service</button><br>
	<span id="ButtonsContextSTAObjects"></span>
	<button onclick='addCircularImage(event, "DialogContext", "Table", "table.png")'><img src="table.png" height="20" valign="middle"> View Table</button><br>
        <button onclick='removeCircularImage(event, "DialogContext")'>Remove</button><br>
    </p>
    <div class="center">
      <button value="cancel" onClick="startingNodeContext=null;" formmethod="dialog">Cancel</button>
    </div>
  </form>
</dialog>


<dialog id="DialogOK">
  <form>
    <span id="DialogOKOptions"></span><br>
    <span id="DialogOKHTML">
    </span>
    <div class="center">
      <button value="cancel" formmethod="dialog">OK</button>
    </div>
  </form>
</dialog>

<h2 id="eventSpanHeading"></h2>
<pre id="eventSpanContent"></pre>

<script type="text/javascript">

"use strict"

window.onbeforeunload = function() { return "Your work will be lost."; }

var currentNode=null, connectionInProcess=false, startingNodeContext=null;
const STAObjects=["ObservedProperties", "Sensors", "Observations", "FeaturesOfInterest", "Things", "Locations", "HistoricalLocations", "Projects", "Licenses", "Parties", "Groups", "Relations", "Datastreams", "MultiDatastreams"];

function StartSTAPage()
{
var s="";
	for (var i=0; i<STAObjects.length; i++)
		s+="<button onclick='addCircularImage(null, null, \"" + STAObjects[i] + "\", \"" + STAObjects[i] + ".png\");'><img src='" + STAObjects[i] + ".png' height='20' valign='middle'> " + STAObjects[i] + "</button> ";
	document.getElementById("ButtonsSTAObjects").innerHTML=s+"<br>";

	s=""
	for (var i=0; i<STAObjects.length; i++)
		s+="<button onclick='addCircularImage(event, \"DialogContext\", \"" + STAObjects[i] + "\", \"" + STAObjects[i] + ".png\");'><img src='" + STAObjects[i] + ".png' height='20' valign='middle'> " + STAObjects[i] + "</button><br>";

	document.getElementById("ButtonsContextSTAObjects").innerHTML=s;
}

//https://web.dev/fetch-api-error-handling/
async function LoadJSONData(node) {
var response, jsonData;
	try {
		response = await fetch(node.STAURL);
	} 
	catch (error) {
		document.getElementById("clarification").innerHTML='Error getting ' + node.STAURL + ": " + error.message;
		console.log('There was an error', error);
		node.data=null;
		networkNodes.update(node);
		return;
	}
	// Uses the 'optional chaining' operator
	if (!(response?.ok)){
		document.getElementById("clarification").innerHTML="HTTP Response Code: " + response?.status + " reading <small>" + node.STAURL + "</small>: " + response?.statusText;
		console.log("HTTP Response Code: " + response?.status + ": " + response?.statusText);
		node.data=null;
		networkNodes.update(node);
		return;
	}
	try {
		jsonData = await response.json();
	} catch (error) {
		if (error instanceof SyntaxError) 
		{
    			document.getElementById("clarification").innerHTML='Syntax error reading ' + node.STAURL+ ": " + error.message;
    			console.log('There was a SyntaxError', error);
			node.data=null;
			networkNodes.update(node);
			return;
  		} 
		else 
		{
    			document.getElementById("clarification").innerHTML='Error interpreting ' + node.STAURL+ ": " + error.message;
    			console.log('There was an error', error);
			node.data=null;
			networkNodes.update(node);
			return;
  		}
	}
	node.data=(jsonData.value) ? jsonData.value : jsonData;
	networkNodes.update(node);
}

function GetSTAURL(event)
{
	event.preventDefault(); // We don't want to submit this form
	document.getElementById("DialogSTAURL").close(currentNode.STAURL);

	if (currentNode.STAURL==document.getElementById("DialogSTAURLInput").value)
		return;

	currentNode.STAURL=document.getElementById("DialogSTAURLInput").value; // Have to send the select box value here.
	if (currentNode.STAURL.charAt(currentNode.STAURL.length - 1)=='/')
		currentNode.STAURL.slice(0, -1);  //remove last character
	networkNodes.update(currentNode);    //https://visjs.github.io/vis-data/data/dataset.html#Data_Manipulation
	LoadJSONData(currentNode);
	
	//if childen nodes have also STAURL
	UpdateChildenSTAURL(currentNode);
}

function IdOfSTAObject(node)
{
	for (var i=0; i<STAObjects.length; i++)
	{
		if (node.image==STAObjects[i]+".png")
			return i;
	}
	return -1;
}

function UpdateChildenSTAURL(parentNode)
{
	var nodeIds=network.getConnectedNodes(parentNode.id, 'to');
	for (var i=0; i<nodeIds.length; i++)
	{
		var node=networkNodes.get(nodeIds[i])
		if (node.STAURL)
		{
			if (IdOfSTAObject(node)!=-1)
			{
				node.STAURL=currentNode.STAURL+"/"+STAObjects[IdOfSTAObject(node)];
				LoadJSONData(node);
			}
		}
		UpdateChildenSTAURL(node);
	}
}

function ShowTableDialogOK(nodeId)
{
	var data=networkNodes.get(nodeId).data;
	var dataAttributes=[], s;
	var rowNumbers=document.getElementById("ShowTableRowNumberDialogOK").checked ? true : false

	if (!data || !data.length)
	{
		document.getElementById("DialogOKHTML").innerHTML="No data to show.";
		return;
	}
	for (var i=0; i<data.length; i++)
	{
		var keys = Object.keys(data[i]);
		for (var k=0; k<keys.length; k++)
		{
			for (var a=0; a<dataAttributes.length; a++)
			{
				if (dataAttributes[a]==keys[k])
					break;
			}
			if (a==dataAttributes.length)
				dataAttributes.push(keys[k]);
		}
	}
	s="<table><tr>";
	if (rowNumbers)
		s+="<th></th>";
	for (var a=0; a<dataAttributes.length; a++)
		s+="<th>"+dataAttributes[a]+"</th>";
	s+="</tr>";
	for (var i=0; i<data.length; i++)
	{
		s+="<tr>";
		if (rowNumbers)
			s+="<td>"+(i+1)+"</td>";
		for (var a=0; a<dataAttributes.length; a++)
		{
			s+="<td>"
			if (typeof data[i][dataAttributes[a]]!== "undefined")
			{
				if ((dataAttributes[a]=="url" || dataAttributes[a]=="definition" ||
					dataAttributes[a].endsWith("@iot.selfLink") || 
					dataAttributes[a].endsWith("@iot.navigationLink")) && data[i][dataAttributes[a]].length)
					s+="<a href='"+data[i][dataAttributes[a]]+"' target='_blank'>"+data[i][dataAttributes[a]]+"</a>";
				else
					s+=JSON.stringify(data[i][dataAttributes[a]]);
			}
			s+="</td>"
		}	
		s+="</tr>"
	}
	s+="</table>";
	document.getElementById("DialogOKHTML").innerHTML=s;
}

	// create an array with nodes	
	var networkNodes = new vis.DataSet([]);

	// create an array with edges	
	var networkEdges = new vis.DataSet([]);

	var network = new vis.Network(document.getElementById("mynetwork"), {
				nodes: networkNodes,
				edges: networkEdges
			}, 
			{
				interaction: { hover: true },	
				manipulation: {  //https://stackoverflow.com/questions/39701703/add-edge-dynamically-visjs
					enabled: false,
					addEdge: function (data, callback) {
						console.log('add edge', data);
						if (data.from == data.to) 
							alert("Connection to the same node is not allowed");					
              					else
						{	
							networkEdges.add([{from: data.from, to: data.to}]);
							var nodeTo=networkNodes.get(data.to);
							var nodeFrom=networkNodes.get(data.from);
							if (nodeFrom.image=="ogc.png" && IdOfSTAObject(nodeTo)!=-1)
							{
								var startingNode=networkNodes.get(startingNodeContext);
								nodeTo.STAURL=nodeFrom.STAURL+"/"+STAObjects[IdOfSTAObject(nodeTo)];
								networkNodes.update(nodeTo); 
								LoadJSONData(nodeTo);
							}
						}
						connectionInProcess=false;
						document.getElementById("clarification").innerHTML="";
              				}
          			}
			});

	network.on("click", function (params) {
        	params.event = "[original event]";
        	document.getElementById("eventSpanHeading").innerText = "Click event:";
        	document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
        	console.log("click event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
	});
	network.on("doubleClick", function (params) {
		params.event = "[original event]";
		document.getElementById("eventSpanHeading").innerText = "doubleClick event:";	
		document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		if (params.nodes && params.nodes.length && !connectionInProcess)
		{	
			currentNode=networkNodes.get(params.nodes[0])
			if (currentNode.image=="ogc.png")
			{
				document.getElementById("DialogSTAURLInput").value=currentNode.STAURL;
				document.getElementById("DialogSTAURL").showModal();
			}
			else if (currentNode.image=="table.png")
			{
				//Determino de quin node dep√®n.
				var nodeids=network.getConnectedNodes(currentNode.id, "from");
				if (nodeids && nodeids.length)
				{	
					if (networkNodes.get(nodeids[0]))
					{
						var data=networkNodes.get(nodeids[0]).data;
						if (data && data.length)
							document.getElementById("DialogOKOptions").innerHTML="<label><input type='checkbox' checked='checked' id='ShowTableRowNumberDialogOK' onChange='ShowTableDialogOK(\""+nodeids[0]+"\");'/> Show row numbers</label>";
						ShowTableDialogOK(nodeids[0]);
					}
					document.getElementById("DialogOK").showModal();
				}
			}
		}
      	});
	network.on("oncontext", function (params) {
		params.event.preventDefault();  //https://stackoverflow.com/questions/38258940/open-an-extension-popup-html-list-on-right-click-of-node-contextmenu-in-visj
		
		var node=network.getNodeAt(params.pointer.DOM); //params.nodes is not useful here as params.nodes are the selected ones and not the ones rightclicked.
		if (node)  
		{
			startingNodeContext=node;
			document.getElementById("DialogContext").showModal();
		}		
		params.event = "[original event]";
		document.getElementById("eventSpanHeading").innerText = "oncontext (right click) event:";
		document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
	});
      	network.on("dragStart", function (params) {
		// There's no point in displaying this event on screen, it gets immediately overwritten
		params.event = "[original event]";
		console.log("dragStart Event:", params);
		console.log("dragStart event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));
	});
	network.on("dragging", function (params) {
		params.event = "[original event]";	
		document.getElementById("eventSpanHeading").innerText = "dragging event:";
		document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
	});
	network.on("dragEnd", function (params) {
		params.event = "[original event]";
		document.getElementById("eventSpanHeading").innerText = "dragEnd event:";
		document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		console.log("dragEnd Event:", params);
		console.log("dragEnd event, getNodeAt returns: " + this.getNodeAt(params.pointer.DOM));	
	});
	network.on("controlNodeDragging", function (params) {
		params.event = "[original event]";
		document.getElementById("eventSpanHeading").innerText = "control node dragging event:";
		document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
	});
	network.on("controlNodeDragEnd", function (params) {
		params.event = "[original event]";
		document.getElementById("eventSpanHeading").innerText = "control node drag end event:";
		document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
		console.log("controlNodeDragEnd Event:", params);
	});
	network.on("zoom", function (params) {
		document.getElementById("eventSpanHeading").innerText = "zoom event:";
		document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
	});
	network.on("showPopup", function (params) {
		document.getElementById("eventSpanHeading").innerText = "showPopup event: ";
		document.getElementById("eventSpanContent").innerText = JSON.stringify(params, null, 4);
	});
	network.on("hidePopup", function () {
		console.log("hidePopup Event");
	});
	network.on("select", function (params) {
		console.log("select Event:", params);
	});
	network.on("selectNode", function (params) {
		console.log("selectNode Event:", params);
	});
	network.on("selectEdge", function (params) {
		console.log("selectEdge Event:", params);
	});
	network.on("deselectNode", function (params) {
		console.log("deselectNode Event:", params);
	});
	network.on("deselectEdge", function (params) {
		console.log("deselectEdge Event:", params);
	});
	network.on("hoverNode", function (params) {
		console.log("hoverNode Event:", params);
	});
	network.on("hoverEdge", function (params) {
		console.log("hoverEdge Event:", params);
	});
	network.on("blurNode", function (params) {
		console.log("blurNode Event:", params);
	});
	network.on("blurEdge", function (params) {
		console.log("blurEdge Event:", params);
	});


function addCircularImage(event, dialog, label, image) 
{
	if (event)
		event.preventDefault(); // We don't want to submit this form
	if (dialog)
		document.getElementById(dialog).close();
        var newId = (Math.random() * 1e7).toString(32);
	var node={ id: newId, label: label, image: image, shape: "circularImage"};
	if (image=="ogc.png")
		node.STAURL="https://cos4cloud.demo.secure-dimensions.de/staplus/v1.1";
	else if (startingNodeContext && IdOfSTAObject(node)!=-1)
	{
		var startingNode=networkNodes.get(startingNodeContext);
		node.STAURL=startingNode.STAURL+"/"+STAObjects[IdOfSTAObject(node)];
	}
        networkNodes.add(node);

	if (image=="ogc.png")
		LoadJSONData(node);
	if (startingNodeContext)
	{
		networkEdges.add([{from: startingNodeContext, to: newId}]);
		if (IdOfSTAObject(node)!=-1)
			LoadJSONData(node);
		startingNodeContext=null;
	}
	network.selectNodes([newId]);
}

function removeCircularImage(event, dialog) 
{
	if (event)
		event.preventDefault(); // We don't want to submit this form
	if (dialog)
		document.getElementById(dialog).close();
	if (startingNodeContext)
	{
		networkNodes.remove(startingNodeContext);
		startingNodeContext=null;
	}
}

function addEdge()
{
	network.addEdgeMode();
	connectionInProcess=true;
	document.getElementById("clarification").innerHTML="Press the mouse botton on the starting node, and drag and drop the mouse on the end node.";
}

</script>

</body>
</html>
